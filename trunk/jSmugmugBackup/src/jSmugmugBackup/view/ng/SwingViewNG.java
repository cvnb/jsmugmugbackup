/*
 * JSmugmugBackupView.java
 */

package jSmugmugBackup.view.ng;

import jSmugmugBackup.model.*;
import jSmugmugBackup.model.accountLayer.*;
import jSmugmugBackup.view.*;

import javax.swing.tree.TreeModel;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;

/**
 * The application's main frame.
 */
public class SwingViewNG extends FrameView implements IView
{

    public SwingViewNG(SingleFrameApplication app)
    {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = SwingViewNGStarterApp.getApplication().getMainFrame();
            aboutBox = new SwingViewNGAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        SwingViewNGStarterApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        loginButton = new javax.swing.JButton();
        logtextareaScrollPane = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        accountScrollPane = new javax.swing.JScrollPane();
        accountTree = new javax.swing.JTree();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        loginMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(jSmugmugBackup.view.ng.SwingViewNGStarterApp.class).getContext().getResourceMap(SwingViewNG.class);
        loginButton.setText(resourceMap.getString("loginButton.text")); // NOI18N
        loginButton.setName("loginButton"); // NOI18N

        logtextareaScrollPane.setName("logtextareaScrollPane"); // NOI18N

        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        logTextArea.setName("logTextArea"); // NOI18N
        logtextareaScrollPane.setViewportView(logTextArea);

        accountScrollPane.setName("accountScrollPane"); // NOI18N

        accountTree.setName("accountTree"); // NOI18N
        accountScrollPane.setViewportView(accountTree);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(accountScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(loginButton)
                        .addGap(82, 82, 82))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(logtextareaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(loginButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 138, Short.MAX_VALUE)
                        .addComponent(logtextareaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(accountScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)))
                .addContainerGap())
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        loginMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        loginMenuItem.setMnemonic('L');
        loginMenuItem.setText(resourceMap.getString("loginMenuItem.text")); // NOI18N
        loginMenuItem.setName("loginMenuItem"); // NOI18N
        fileMenu.add(loginMenuItem);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(jSmugmugBackup.view.ng.SwingViewNGStarterApp.class).getContext().getActionMap(SwingViewNG.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N
        statusPanel.setPreferredSize(new java.awt.Dimension(521, 30));

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 345, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane accountScrollPane;
    private javax.swing.JTree accountTree;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JButton loginButton;
    private javax.swing.JMenuItem loginMenuItem;
    private javax.swing.JScrollPane logtextareaScrollPane;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;

    //-------------- IView Implementation -----------------------------------
	private Logger log = null;
	private Model model = null;

    private SwingViewNGWaitDialog waitDialog = null;

    // called by the constructor
    public void init(Model model)
    {
        this.model = model;
		this.model.setView(this);
		this.log = Logger.getInstance();
		this.log.registerView(this);


    }

    public void start()
    {
        /* noop */
    }

//    public ILoginView getLoginMethod()
//    {
//        ILoginView loginToken = new LoginViewSwingNG(this);
//        return loginToken;
//    }

    public void refreshFileListing(IRootElement smugmugRoot)
    {
        DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode("account");

        for (ICategory c : smugmugRoot.getCategoryList())
		{
			DefaultMutableTreeNode categoryTreeNode = new DefaultMutableTreeNode(c.getName());

			for (ISubcategory s : c.getSubcategoryList())
			{
				DefaultMutableTreeNode subcategoryTreeNode = new DefaultMutableTreeNode(s.getName());
				for (IAlbum a : s.getAlbumList())
				{
					DefaultMutableTreeNode albumTreeNode = new DefaultMutableTreeNode(a.getName());
					for (IImage i : a.getImageList())
					{
						albumTreeNode.add(new DefaultMutableTreeNode(i.getName()));
					}
					subcategoryTreeNode.add(albumTreeNode);
				}
				categoryTreeNode.add(subcategoryTreeNode);
			}

			for (IAlbum a : c.getAlbumList())
			{
				DefaultMutableTreeNode albumTreeNode = new DefaultMutableTreeNode(a.getName());
				for (IImage i : a.getImageList())
				{
					albumTreeNode.add(new DefaultMutableTreeNode(i.getName()));
				}
				categoryTreeNode.add(albumTreeNode);
			}

			rootNode.add(categoryTreeNode);
		}

        this.accountTree.setModel((TreeModel) rootNode);


		//expand the tree
		for (int row=0; row < this.accountTree.getRowCount(); row++)
		{
			this.accountTree.expandRow(row);
		}
    }

    public ILoginDialogResult showLoginDialog()
    {
        SwingViewNGLoginDialog dialog = new SwingViewNGLoginDialog( this.getFrame(), true );
		dialog.setVisible(true);
        return dialog.getLoginDialogResult();
    }

    public ITransferDialogResult showListDialog() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public ITransferDialogResult showSortDialog() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public ITransferDialogResult showUploadDialog() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public ITransferDialogResult showDownloadDialog() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public ITransferDialogResult showVerifyDialog() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public ITransferDialogResult showDeleteDialog() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void printLog(String text)
    {
        this.logTextArea.append(text);
    }

    public void showError(String errMessage) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void showBusyStart(String waitingMessage)
    {
        //disable frame, so no mouse events will be recieved
        this.getFrame().setEnabled(false);

        //set message in statusbar
        this.statusMessageLabel.setText(waitingMessage);

        //display waiting dialog
        this.waitDialog = new SwingViewNGWaitDialog(this.getFrame(), false, waitingMessage);
        ////this.waitDialog.setMessage("please wait ...", waitingMessage);
        this.waitDialog.setVisible(true);
        this.waitDialog.validate();

        this.getFrame().validate();
    }

    public void showBusyStop()
    {        
        this.waitDialog.setVisible(false);
        this.waitDialog = null;

        this.statusMessageLabel.setText("");
        
        //enable frame
        this.getFrame().setEnabled(true);
        this.getFrame().validate();
    }

    public void addLoginButtonListener(ActionListener listener)
    {
        this.loginButton.addActionListener(listener);
        this.loginMenuItem.addActionListener(listener);
    }

    public void addRefreshButtonListener(ActionListener listener)
    {
        /* todo: nothing to register yet */
    }

    public void addSortButtonListener(ActionListener listener)
    {
        /* todo: nothing to register yet */
    }

    public void addUploadDialogButtonListener(ActionListener listener)
    {
        /* todo: nothing to register yet */
    }

    public void addUploadStartButtonListener(ActionListener listener)
    {
        /* todo: nothing to register yet */
    }

    public void addDownloadDialogButtonListener(ActionListener listener)
    {
        /* todo: nothing to register yet */
    }

    public void addDownloadStartButtonListener(ActionListener listener)
    {
        /* todo: nothing to register yet */
    }

    public void addVerifyDialogButtonListener(ActionListener listener)
    {
        /* todo: nothing to register yet */
    }

    public void addVerifyStartButtonListener(ActionListener listener)
    {
        /* todo: nothing to register yet */
    }

    public void addDeleteDialogButtonListener(ActionListener listener)
    {
        /* todo: nothing to register yet */
    }

    public void addDeleteStartButtonListener(ActionListener listener)
    {
        /* todo: nothing to register yet */
    }

    public void addQuitButtonListener(ActionListener listener)
    {
        /* todo: nothing to register yet */
    }
}
