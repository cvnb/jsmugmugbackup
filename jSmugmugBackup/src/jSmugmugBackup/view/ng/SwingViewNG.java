/*
 * JSmugmugBackupView.java
 */

package jSmugmugBackup.view.ng;

import jSmugmugBackup.config.GlobalConfig;
import jSmugmugBackup.model.*;
import jSmugmugBackup.model.accountLayer.*;
import jSmugmugBackup.view.*;

import javax.swing.tree.TreeModel;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

/**
 * The application's main frame.
 */
public class SwingViewNG extends FrameView implements IView
{

    public SwingViewNG(SingleFrameApplication app)
    {
        super(app);

        initComponents();

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = SwingViewNGStarterApp.getApplication().getMainFrame();
            aboutBox = new SwingViewNGAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        SwingViewNGStarterApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        loginButton = new javax.swing.JButton();
        logtextareaScrollPane = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        accountScrollPane = new javax.swing.JScrollPane();
        accountTree = new javax.swing.JTree();
        listButton = new javax.swing.JButton();
        uploadButton = new javax.swing.JButton();
        downloadButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        loginMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        downloadDialog = new javax.swing.JDialog();
        folderLabel = new javax.swing.JLabel();
        folderTextField = new javax.swing.JTextField();
        folderButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        loginDialog = new javax.swing.JDialog();
        loginUsernameLabel = new javax.swing.JLabel();
        loginPasswordLabel = new javax.swing.JLabel();
        loginUsernameTextField = new javax.swing.JTextField();
        loginPasswordPasswordField = new javax.swing.JPasswordField();
        loginCancelButton = new javax.swing.JButton();
        loginOkButton = new javax.swing.JButton();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(jSmugmugBackup.view.ng.SwingViewNGStarterApp.class).getContext().getResourceMap(SwingViewNG.class);
        loginButton.setText(resourceMap.getString("loginButton.text")); // NOI18N
        loginButton.setName("loginButton"); // NOI18N

        logtextareaScrollPane.setName("logtextareaScrollPane"); // NOI18N

        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        logTextArea.setName("logTextArea"); // NOI18N
        logtextareaScrollPane.setViewportView(logTextArea);

        accountScrollPane.setName("accountScrollPane"); // NOI18N

        accountTree.setName("accountTree"); // NOI18N
        accountScrollPane.setViewportView(accountTree);

        listButton.setText(resourceMap.getString("listButton.text")); // NOI18N
        listButton.setEnabled(false);
        listButton.setName("listButton"); // NOI18N

        uploadButton.setText(resourceMap.getString("uploadButton.text")); // NOI18N
        uploadButton.setEnabled(false);
        uploadButton.setName("uploadButton"); // NOI18N

        downloadButton.setText(resourceMap.getString("downloadButton.text")); // NOI18N
        downloadButton.setName("downloadButton"); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(accountScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(logtextareaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(uploadButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(loginButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                        .addComponent(listButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                        .addComponent(downloadButton, javax.swing.GroupLayout.Alignment.TRAILING)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(accountScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(loginButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(listButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(uploadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(downloadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 150, Short.MAX_VALUE)
                        .addComponent(logtextareaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        loginMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        loginMenuItem.setMnemonic('L');
        loginMenuItem.setText(resourceMap.getString("loginMenuItem.text")); // NOI18N
        loginMenuItem.setName("loginMenuItem"); // NOI18N
        fileMenu.add(loginMenuItem);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(jSmugmugBackup.view.ng.SwingViewNGStarterApp.class).getContext().getActionMap(SwingViewNG.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N
        statusPanel.setPreferredSize(new java.awt.Dimension(521, 30));

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 345, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusAnimationLabel)
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusMessageLabel)
                    .addComponent(statusAnimationLabel)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        downloadDialog.setModal(true);
        downloadDialog.setName("downloadDialog"); // NOI18N

        folderLabel.setText(resourceMap.getString("folderLabel.text")); // NOI18N
        folderLabel.setName("folderLabel"); // NOI18N

        folderTextField.setText(resourceMap.getString("folderTextField.text")); // NOI18N
        folderTextField.setName("folderTextField"); // NOI18N

        folderButton.setText(resourceMap.getString("folderButton.text")); // NOI18N
        folderButton.setName("folderButton"); // NOI18N

        jSeparator1.setName("jSeparator1"); // NOI18N

        okButton.setText(resourceMap.getString("okButton.text")); // NOI18N
        okButton.setName("okButton"); // NOI18N

        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N

        javax.swing.GroupLayout downloadDialogLayout = new javax.swing.GroupLayout(downloadDialog.getContentPane());
        downloadDialog.getContentPane().setLayout(downloadDialogLayout);
        downloadDialogLayout.setHorizontalGroup(
            downloadDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(downloadDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(downloadDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(downloadDialogLayout.createSequentialGroup()
                        .addGroup(downloadDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                            .addGroup(downloadDialogLayout.createSequentialGroup()
                                .addComponent(folderLabel)
                                .addGap(18, 18, 18)
                                .addComponent(folderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(folderButton)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, downloadDialogLayout.createSequentialGroup()
                        .addComponent(cancelButton)
                        .addGap(78, 78, 78)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70))))
        );
        downloadDialogLayout.setVerticalGroup(
            downloadDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(downloadDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(downloadDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(folderLabel)
                    .addComponent(folderTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(folderButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(downloadDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(downloadDialogLayout.createSequentialGroup()
                        .addGap(245, 245, 245)
                        .addComponent(okButton)
                        .addContainerGap(69, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, downloadDialogLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton)
                        .addGap(48, 48, 48))))
        );

        loginDialog.setModal(true);
        loginDialog.setName("loginDialog"); // NOI18N
        loginDialog.setResizable(false);

        loginUsernameLabel.setText(resourceMap.getString("loginUsernameLabel.text")); // NOI18N
        loginUsernameLabel.setName("loginUsernameLabel"); // NOI18N

        loginPasswordLabel.setText(resourceMap.getString("loginPasswordLabel.text")); // NOI18N
        loginPasswordLabel.setName("loginPasswordLabel"); // NOI18N

        loginUsernameTextField.setText(resourceMap.getString("loginUsernameTextField.text")); // NOI18N
        loginUsernameTextField.setName("loginUsernameTextField"); // NOI18N

        loginPasswordPasswordField.setText(resourceMap.getString("loginPasswordPasswordField.text")); // NOI18N
        loginPasswordPasswordField.setName("loginPasswordPasswordField"); // NOI18N

        loginCancelButton.setAction(actionMap.get("loginCancelButtonActionPerformed")); // NOI18N
        loginCancelButton.setText(resourceMap.getString("loginCancelButton.text")); // NOI18N
        loginCancelButton.setName("loginCancelButton"); // NOI18N

        loginOkButton.setAction(actionMap.get("loginOkButtonActionPerformend")); // NOI18N
        loginOkButton.setText(resourceMap.getString("loginOkButton.text")); // NOI18N
        loginOkButton.setName("loginOkButton"); // NOI18N

        javax.swing.GroupLayout loginDialogLayout = new javax.swing.GroupLayout(loginDialog.getContentPane());
        loginDialog.getContentPane().setLayout(loginDialogLayout);
        loginDialogLayout.setHorizontalGroup(
            loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loginDialogLayout.createSequentialGroup()
                        .addGroup(loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loginUsernameLabel)
                            .addComponent(loginPasswordLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(loginPasswordPasswordField)
                            .addComponent(loginUsernameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginDialogLayout.createSequentialGroup()
                        .addComponent(loginCancelButton)
                        .addGap(18, 18, 18)
                        .addComponent(loginOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        loginDialogLayout.setVerticalGroup(
            loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginUsernameLabel)
                    .addComponent(loginUsernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginPasswordLabel)
                    .addComponent(loginPasswordPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(loginDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginOkButton)
                    .addComponent(loginCancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane accountScrollPane;
    private javax.swing.JTree accountTree;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton downloadButton;
    private javax.swing.JDialog downloadDialog;
    private javax.swing.JButton folderButton;
    private javax.swing.JLabel folderLabel;
    private javax.swing.JTextField folderTextField;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton listButton;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JButton loginButton;
    private javax.swing.JButton loginCancelButton;
    private javax.swing.JDialog loginDialog;
    private javax.swing.JMenuItem loginMenuItem;
    private javax.swing.JButton loginOkButton;
    private javax.swing.JLabel loginPasswordLabel;
    private javax.swing.JPasswordField loginPasswordPasswordField;
    private javax.swing.JLabel loginUsernameLabel;
    private javax.swing.JTextField loginUsernameTextField;
    private javax.swing.JScrollPane logtextareaScrollPane;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton okButton;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JButton uploadButton;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;

    private JDialog aboutBox;

    //-------------- IView Implementation -----------------------------------
	private GlobalConfig config = null;
    private Logger log = null;
	private Model model = null;

    private SwingViewNGWaitDialog waitDialog = null;

    private IRootElement smugmugRoot = null;

    // called by the constructor
    public void init(Model model)
    {
        this.config = GlobalConfig.getInstance();
        this.model = model;
		this.model.setView(this);
		this.log = Logger.getInstance();
		this.log.registerView(this);


        this.getFrame().setTitle("jSmugmugBackup v" + this.config.getConstantVersion() + " (experimental GUI)");

        DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode("<empty>");
        DefaultTreeModel treeModel = new DefaultTreeModel(rootNode);
        this.accountTree.setModel(treeModel);

    }

    public void start()
    {
        /* noop */
    }

//    public ILoginView getLoginMethod()
//    {
//        ILoginView loginToken = new LoginViewSwingNG(this);
//        return loginToken;
//    }

    public void updateFileListing(IRootElement smugmugRoot)
    {
        this.smugmugRoot = smugmugRoot;

        DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode(this.smugmugRoot.getName());

        for (ICategory c : this.smugmugRoot.getCategoryList())
		{
			DefaultMutableTreeNode categoryTreeNode = new DefaultMutableTreeNode(c.getName());

			for (ISubcategory s : c.getSubcategoryList())
			{
				DefaultMutableTreeNode subcategoryTreeNode = new DefaultMutableTreeNode(s.getName());
				for (IAlbum a : s.getAlbumList())
				{
					DefaultMutableTreeNode albumTreeNode = new DefaultMutableTreeNode(a.getName());
					for (IImage i : a.getImageList())
					{
						albumTreeNode.add(new DefaultMutableTreeNode(i.getName()));
					}
					subcategoryTreeNode.add(albumTreeNode);
				}
				categoryTreeNode.add(subcategoryTreeNode);
			}

			for (IAlbum a : c.getAlbumList())
			{
				DefaultMutableTreeNode albumTreeNode = new DefaultMutableTreeNode(a.getName());
				for (IImage i : a.getImageList())
				{
					albumTreeNode.add(new DefaultMutableTreeNode(i.getName()));
				}
				categoryTreeNode.add(albumTreeNode);
			}

			rootNode.add(categoryTreeNode);
		}

        this.accountTree.setModel( new DefaultTreeModel(rootNode) );


        /*
		//expand the tree
		for (int row=0; row < this.accountTree.getRowCount()-1; row++)
		{
			this.accountTree.expandRow(row);
		}
        */

        // enable upload button
        this.uploadButton.setEnabled(true);
    }

    @Action
    public ILoginDialogResult showLoginDialog()
    {
//        SwingViewNGLoginDialog loginDialog = new SwingViewNGLoginDialog( this.getFrame(), true );
//		loginDialog.setVisible(true);
//        return loginDialog.getLoginDialogResult();

        this.loginDialog.setSize(250, 125);
        this.loginDialog.setVisible(true);

        return this.loginGetLoginDialogResult();
    }

    public ITransferDialogResult showListDialog()
    {
        // listing everything by default
        return new TransferDialogResult(null, null, null, null, null);
    }


    public ITransferDialogResult showUploadDialog()
    {
        // we need the tree structure from the account to initialize the upload dialog
        // todo: maybe a messagebox saying "you need to login and list your account first" would be nice
        if (this.smugmugRoot == null) return null;

        SwingViewNGUploadDialog uploadDialog = new SwingViewNGUploadDialog(this.getFrame(), true);
        uploadDialog.initTransferFilter(this.smugmugRoot);
        uploadDialog.setVisible(true);
        return uploadDialog.getUploadDialogResult();
    }

    public ITransferDialogResult showSortDialog() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public ITransferDialogResult showDownloadDialog()
    {
        
        //this.log.printLogLine("yes");
        this.downloadDialog.setSize(200, 200);
        this.downloadDialog.setVisible(true);

        return null;
    }
    

    public ITransferDialogResult showVerifyDialog() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public ITransferDialogResult showDeleteDialog() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void printLog(String text)
    {
        this.logTextArea.append(text);
    }

    public void showError(String errMessage) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void showBusyStart(String waitingMessage)
    {
        //disable frame, so no mouse events will be recieved
        this.getFrame().setEnabled(false);

        //set message in statusbar
        this.statusMessageLabel.setText(waitingMessage);

        //display waiting dialog
        this.waitDialog = new SwingViewNGWaitDialog(this.getFrame(), false, waitingMessage);
        ////this.waitDialog.setMessage("please wait ...", waitingMessage);
        this.waitDialog.setVisible(true);
        this.waitDialog.validate();

        this.getFrame().validate();
    }

    public void showBusyStop()
    {        
        this.waitDialog.setVisible(false);
        this.waitDialog = null;

        this.statusMessageLabel.setText("");
        
        //enable frame
        this.getFrame().setEnabled(true);
        this.getFrame().validate();
    }

    public void addLoginButtonListener(ActionListener listener)
    {
        this.loginButton.addActionListener(listener);
        this.loginMenuItem.addActionListener(listener);
    }

    public void addListButtonListener(ActionListener listener)
    {
        this.listButton.addActionListener(listener);
    }

    public void addUploadDialogButtonListener(ActionListener listener)
    {
        this.uploadButton.addActionListener(listener);
    }

    public void addSortButtonListener(ActionListener listener)
    {
        /* todo: nothing to register yet */
    }


    public void addUploadStartButtonListener(ActionListener listener)
    {
        /* todo: nothing to register yet */
    }

    public void addDownloadDialogButtonListener(ActionListener listener)
    {
        this.downloadButton.addActionListener(listener);
    }

    public void addDownloadStartButtonListener(ActionListener listener)
    {
        /* todo: nothing to register yet */
    }

    public void addVerifyDialogButtonListener(ActionListener listener)
    {
        /* todo: nothing to register yet */
    }

    public void addVerifyStartButtonListener(ActionListener listener)
    {
        /* todo: nothing to register yet */
    }

    public void addDeleteDialogButtonListener(ActionListener listener)
    {
        /* todo: nothing to register yet */
    }

    public void addDeleteStartButtonListener(ActionListener listener)
    {
        /* todo: nothing to register yet */
    }

    public void addQuitButtonListener(ActionListener listener)
    {
        /* todo: nothing to register yet */
    }



    //----------------------- login dialog -------------------------------------
    private ILoginDialogResult loginLoginDialogResult = null;

    public ILoginDialogResult loginGetLoginDialogResult()
    {
        return this.loginLoginDialogResult;
    }

    private void loginResetLoginDialog()
    {
        //making form invisible
        this.loginDialog.setVisible(false);

        //clear input fields
        this.loginUsernameTextField.setText("");
        this.loginPasswordPasswordField.setText("");
    }

    @Action
    public void loginOkButtonActionPerformend()
    {
        //storing username and password
        this.loginLoginDialogResult = new LoginDialogResult(this.loginUsernameTextField.getText(), this.loginPasswordPasswordField.getText());

        this.loginResetLoginDialog();
    }

    @Action
    public void loginCancelButtonActionPerformed()
    {
        this.loginLoginDialogResult = null;

        this.loginResetLoginDialog();
    }

}
